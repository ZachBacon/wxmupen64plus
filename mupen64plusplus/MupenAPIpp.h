#ifndef __MUPEN_API_PP__#define __MUPEN_API_PP__#include <vector>#include <string>#include "m64p_types.h"#include <wx/variant.h>class ConfigParamChoice{public:    wxString m_name;    int m_value;    ConfigParamChoice(wxString name, int value)    {        m_name = name;        m_value = value;    }};class ConfigParam{    unsigned long m_magic_number;public:    m64p_type   m_param_type;    std::string m_param_name;    std::string m_help_string;    m64p_handle m_parent_section;    bool        m_enabled;    /** will be non-empty if some pre-defined choices are available */    std::vector<ConfigParamChoice> m_choices;    ConfigParam(m64p_handle section)    {        m_enabled = true;        m_parent_section = section;        m_magic_number = 0xC001C001;    }    ~ConfigParam()    {        m_magic_number = 0xDEADBEEF;    }    bool ok() const { return (m_magic_number == 0xC001C001); }    int getIntValue();    bool getBoolValue();    float getFloatValue();    std::string getStringValue();    void setIntValue(const int newValue);    void setBoolValue(const int newValue);    void setFloatValue(const float newValue);    void setStringValue(const std::string& newValue);};class ConfigSection{public:    std::string              m_section_name;    std::vector<ConfigParam> m_parameters;    m64p_handle m_handle;    ConfigSection(std::string name, m64p_handle sectionHandle) : m_handle(sectionHandle)    {        m_section_name = name;    }    bool hasChildNamed(const char* name) const;    ConfigParam* getParamWithName(const char* name);    void addNewParam(const char* name, wxVariant value, m64p_type type);    static bool compare(const ConfigSection& a, const ConfigSection& b)    {        return (a.m_section_name < b.m_section_name);    }};class Mupen64PlusPlus{public:    Mupen64PlusPlus(const char *CoreLibFilepath);    void loadPlugins(const char* pluginDir, const char* gfxPlugin, const char* audioPlugin,                     const char* inputPlugin, const char* rspPlugin);    std::vector<ConfigSection> getConfigContents();};#endif